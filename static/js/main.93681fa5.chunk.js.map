{"version":3,"sources":["helpers/match.js","SquareWaveIcon/index.js","TriangleWaveIcon/index.js","SawtoothWaveIcon/index.js","SineWaveIcon/index.js","OptionsToggle/index.js","PresetsVirtual/index.js","ShuttleControls/index.js","index.js"],"names":["removeDiacritics","require","clean","specialCharsRegex","wordCharacterRegex","whitespacesRegex","module","exports","text","query","options","subject","baseObject","insideWords","findAllOccurrences","requireMatchAll","Object","keys","forEach","key","trim","split","filter","word","length","reduce","result","occurrence","index","wordLen","prefix","test","regex","RegExp","replace","exec","push","slice","Array","join","sort","match1","match2","SquareWaveIcon","props","SvgIcon","version","id","x","y","viewBox","enableBackground","fill","strokeMiterlimit","strokeWidth","stroke","points","TriangleWaveIcon","SawtoothWaveIcon","SineWaveIcon","d","useStyles","makeStyles","theme","paper","display","border","palette","divider","flexWrap","alignSelf","height","margin","spacing","StyledToggleButtonGroup","withStyles","grouped","padding","borderRadius","shape","ToggleButtonGroup","OptionsToggle","optionsChangeCallback","React","useState","waveform","setWaveform","loop","setShouldLoop","classes","Paper","elevation","className","size","value","exclusive","onChange","_","newWaveform","aria-label","ToggleButton","Divider","orientation","arial-label","selected","onClick","renderRow","data","style","cloneElement","overflow","textOverflow","whiteSpace","ListboxComponent","forwardRef","ref","children","other","useTheme","smUp","useMediaQuery","breakpoints","up","itemCount","isArray","itemSize","outerElementType","useMemo","props2","ref2","Math","min","maxHeight","itemData","width","innerElementType","overscanCount","listbox","PresetsVirtual","presetsChangeCallback","open","setOpen","presets","setPresets","JSON","parse","localStorage","getItem","selectedPresets","setSelectedPresets","loading","useEffect","setItem","stringify","active","a","request","Request","process","method","cache","fetch","response","json","parsedPresets","programs","map","preset","name","comments","frequencies","Autocomplete","multiple","onOpen","onClose","values","getOptionLabel","filterSelectedOptions","filterOptions","allPresets","state","label","inputValue","toLowerCase","includes","disableOpenOnFocus","disableListWrap","freeSolo","autoHighlight","renderInput","params","TextField","fullWidth","variant","InputProps","endAdornment","Fragment","CircularProgress","color","renderOption","option","matchOptions","nameMatches","match","nameParts","commentMatches","commentParts","undefined","frequencyMatches","frequencyParts","Grid","container","alignItems","item","xs","part","fontWeight","highlight","Typography","fab","position","bottom","right","ShuttleControls","analyser","bufferLength","playing","setPlaying","oscillator","useRef","audioCtx","secToMs","timeouts","terminateAudio","current","onended","stop","err","indicateFrequency","frequency","secondsFromNow","setTimeout","playClick","stopClick","window","AudioContext","webkitAudioContext","createAnalyser","createOscillator","connect","destination","fftSize","type","startOfNextFrequencyViaAudioCtx","currentTime","startOfNextFrequencyFromNow","presetIndex","concat","setValueAtTime","frequencyBinCount","Uint8Array","console","log","start","clearTimeout","pop","handlePlaying","isPlay","Date","getTime","close","Fab","createMuiTheme","primary","indigo","secondary","blue","Player","root","setState","sm","this","Component","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.93681fa5.chunk.js","sourcesContent":["//This file comes from https://github.com/moroshko/autosuggest-highlight/pull/12\r\n\r\nvar removeDiacritics = require('diacritic').clean;\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\r\nvar specialCharsRegex = /[.*+?^${}()|[\\]\\\\]/g;\r\n\r\n// http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6\r\nvar wordCharacterRegex = /[a-z0-9_]/i;\r\n\r\nvar whitespacesRegex = /\\s+/;\r\n\r\nfunction escapeRegexCharacters(str) {\r\n  return str.replace(specialCharsRegex, '\\\\$&');\r\n}\r\n\r\nfunction extend(subject, baseObject) {\r\n  subject = subject || {};\r\n  Object.keys(subject).forEach(function(key) {\r\n    baseObject[key] = !!subject[key];\r\n  });\r\n  return baseObject;\r\n}\r\n\r\nmodule.exports = function match(text, query, options) {\r\n  options = extend(options, {\r\n    insideWords: false,\r\n    findAllOccurrences: false,\r\n    requireMatchAll: false\r\n  });\r\n\r\n  text = removeDiacritics(text);\r\n  query = removeDiacritics(query);\r\n\r\n  return (\r\n    query\r\n      .trim()\r\n      .split(whitespacesRegex)\r\n      // If query is blank, we'll get empty string here, so let's filter it out.\r\n      .filter(function(word) {\r\n        return word.length > 0;\r\n      })\r\n      .reduce(function(result, word) {\r\n        var wordLen = word.length;\r\n        var prefix = !options.insideWords && wordCharacterRegex.test(word[0]) ? '\\\\b' : '';\r\n        var regex = new RegExp(prefix + escapeRegexCharacters(word), 'i');\r\n        var occurrence, index;\r\n\r\n        occurrence = regex.exec(text);\r\n        if (options.requireMatchAll && occurrence === null) {\r\n          text = '';\r\n          return [];\r\n        }\r\n\r\n        while (occurrence) {\r\n          index = occurrence.index;\r\n          result.push([index, index + wordLen]);\r\n\r\n          // Replace what we just found with spaces so we don't find it again.\r\n          text =\r\n            text.slice(0, index) +\r\n            new Array(wordLen + 1).join(' ') +\r\n            text.slice(index + wordLen);\r\n\r\n          if (!options.findAllOccurrences) {\r\n            break;\r\n          }\r\n\r\n          occurrence = regex.exec(text);\r\n        }\r\n\r\n        return result;\r\n      }, [])\r\n      .sort(function(match1, match2) {\r\n        return match1[0] - match2[0];\r\n      })\r\n  );\r\n};\r\n","import React from 'react';\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\n\r\nexport default function SquareWaveIcon(props) {\r\n    return (\r\n        <SvgIcon {...props}>\r\n            <svg version=\"1.1\" id=\"Layer_1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 32 32\" enableBackground=\"new 0 0 32 32\">\r\n                <polyline fill=\"none\" strokeMiterlimit=\"10\" strokeWidth=\"2.5\" stroke=\"currentColor\" points=\"1.5,15.5 1.5,1.5 16.5,1.5 16.5,30.5 30.5,30.5 30.5,15.5 \"/>\r\n            </svg>\r\n        </SvgIcon>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\n\r\nexport default function TriangleWaveIcon(props) {\r\n    return (\r\n        <SvgIcon {...props}>\r\n            <svg version=\"1.1\" id=\"Layer_1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 32 32\" enableBackground=\"new 0 0 32 32\">\r\n            <   polyline fill=\"none\" strokeMiterlimit=\"10\" strokeWidth=\"2.5\" stroke=\"currentColor\" points=\"1.5,15.5 9.5,1.5 22.5,30.5 30.5,15.5\"/>\r\n            </svg>\r\n        </SvgIcon>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\n\r\nexport default function SawtoothWaveIcon(props) {\r\n    return (\r\n        <SvgIcon {...props}>\r\n            <svg version=\"1.1\" id=\"Layer_1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 32 32\" enableBackground=\"new 0 0 32 32\">\r\n                <polyline fill=\"none\" strokeMiterlimit=\"10\" strokeWidth=\"2.5\" stroke=\"currentColor\" points=\"1.5,15.5 1.5,1.5 30.5,30.5 30.5,15.5 \"/>\r\n            </svg>\r\n        </SvgIcon>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\n\r\nexport default function SineWaveIcon(props) {\r\n    return (\r\n        <SvgIcon {...props}>\r\n            <svg version=\"1.1\" id=\"Layer_1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 32 32\" enableBackground=\"new 0 0 32 32\">\r\n                <path fill=\"none\" strokeMiterlimit=\"10\" strokeWidth=\"2.5\" stroke=\"currentColor\" d=\"M30.5,15.5c0,17-14,17.8-14,0c0-17.2-15-16-15,0 \"/>\r\n            </svg>\r\n        </SvgIcon>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport SquareWaveIcon from '../SquareWaveIcon';\r\nimport TriangleWaveIcon from '../TriangleWaveIcon';\r\nimport SawtoothWaveIcon from '../SawtoothWaveIcon';\r\nimport SineWaveIcon from '../SineWaveIcon';\r\nimport LoopIcon from '@material-ui/icons/Loop';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Paper from '@material-ui/core/Paper';\r\n// import Tooltip from '@material-ui/core/Tooltip';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    display: 'flex',\r\n    border: `1px solid ${theme.palette.divider}`,\r\n    flexWrap: 'wrap',\r\n  },\r\n  divider: {\r\n    alignSelf: 'stretch',\r\n    height: 'auto',\r\n    margin: theme.spacing(1, 0.5),\r\n  },\r\n}));\r\n\r\nconst StyledToggleButtonGroup = withStyles(theme => ({\r\n  grouped: {\r\n    margin: theme.spacing(0.5),\r\n    border: 'none',\r\n    padding: theme.spacing(0, 1),\r\n    '&:not(:first-child)': {\r\n      borderRadius: theme.shape.borderRadius,\r\n    },\r\n    '&:first-child': {\r\n      borderRadius: theme.shape.borderRadius,\r\n    },\r\n  },\r\n}))(ToggleButtonGroup);\r\n\r\nexport default function OptionsToggle({ optionsChangeCallback }) {\r\n  const [waveform, setWaveform] = React.useState('sine');\r\n  const [loop, setShouldLoop] = React.useState(true);\r\n\r\n  const handleWaveform = (_, newWaveform) => {\r\n    if (newWaveform !== null) {\r\n      setWaveform(newWaveform);\r\n      optionsChangeCallback({ waveform: newWaveform, loop: loop });\r\n    }\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Paper elevation={0} className={classes.paper}>\r\n        <StyledToggleButtonGroup\r\n          size=\"small\"\r\n          value={waveform}\r\n          exclusive\r\n          onChange={handleWaveform}\r\n          aria-label=\"waveform\"\r\n        >\r\n          {/* Unfortunately, Tooltip doesn't work with multiple ToggleButtons in a ToggleButtonGroup */}\r\n          {/* <Tooltip title=\"square waves\"> */}\r\n            <ToggleButton value=\"square\" aria-label=\"square waves\">\r\n              <SquareWaveIcon />\r\n            </ToggleButton>\r\n          {/* </Tooltip> */}\r\n          {/* <Tooltip title=\"triangle waves\"> */}\r\n            <ToggleButton value=\"triangle\" aria-label=\"triangle waves\">\r\n              <TriangleWaveIcon />\r\n            </ToggleButton>\r\n          {/* </Tooltip> */}\r\n          {/* <Tooltip title=\"sawtooth waves\"> */}\r\n            <ToggleButton value=\"sawtooth\" aria-label=\"sawtooth waves\">\r\n              <SawtoothWaveIcon />\r\n            </ToggleButton>\r\n          {/* </Tooltip> */}\r\n          {/* <Tooltip title=\"sine waves\"> */}\r\n            <ToggleButton value=\"sine\" aria-label=\"sine waves\">\r\n              <SineWaveIcon />\r\n            </ToggleButton>\r\n          {/* </Tooltip> */}\r\n        </StyledToggleButtonGroup>\r\n        <Divider orientation=\"vertical\" className={classes.divider} />\r\n        <StyledToggleButtonGroup\r\n          size=\"small\"\r\n          arial-label=\"text formatting\"\r\n        >\r\n          {/* <Tooltip title=\"loop audio\"> */}\r\n            <ToggleButton value=\"loop\"\r\n              selected={loop}\r\n              onClick={() => {\r\n                setShouldLoop(!loop);\r\n                optionsChangeCallback({ waveform: waveform, loop: !loop });\r\n              }}\r\n              aria-label=\"loop audio\">\r\n              <LoopIcon />\r\n            </ToggleButton>\r\n          {/* </Tooltip> */}\r\n        </StyledToggleButtonGroup>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport parse from 'autosuggest-highlight/parse';\r\n// import match from 'autosuggest-highlight/match';\r\nimport match from '../helpers/match';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\r\nimport { FixedSizeList } from 'react-window';\r\n\r\nfunction renderRow(props) {\r\n    const { data, index, style } = props;\r\n\r\n    return React.cloneElement(data[index], {\r\n        style: {\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            whiteSpace: 'nowrap',\r\n            display: 'block',\r\n            ...style,\r\n        },\r\n    });\r\n}\r\n\r\n// Adapter for react-window\r\nconst ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {\r\n    const { children, ...other } = props;\r\n    const theme = useTheme();\r\n    const smUp = useMediaQuery(theme.breakpoints.up('sm'));\r\n    const itemCount = Array.isArray(children) ? children.length : 0;\r\n    //Easier to just fix the size...\r\n    const itemSize = (smUp ? 36 : 48) * 2.2;\r\n\r\n    const outerElementType = React.useMemo(() => {\r\n        return React.forwardRef((props2, ref2) => <div ref={ref2} {...props2} {...other} />);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div ref={ref}>\r\n            <FixedSizeList\r\n                style={{ padding: 0, height: Math.min(3, itemCount) * itemSize, maxHeight: 'auto' }}\r\n                itemData={children}\r\n                height={250}\r\n                width=\"100%\"\r\n                outerElementType={outerElementType}\r\n                innerElementType=\"ul\"\r\n                itemSize={itemSize}\r\n                overscanCount={5}\r\n                itemCount={itemCount}\r\n            >\r\n                {renderRow}\r\n            </FixedSizeList>\r\n        </div>\r\n    );\r\n});\r\n\r\nListboxComponent.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    listbox: {\r\n        '& ul': {\r\n            padding: 0,\r\n            margin: 0,\r\n        },\r\n    },\r\n});\r\n\r\nexport default function PresetsVirtual({presetsChangeCallback}) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [presets, setPresets] = React.useState([]);\r\n    const [selectedPresets, setSelectedPresets] = React.useState(\r\n        (() => {\r\n            const parsedSelectedPresets = JSON.parse(localStorage.getItem('selectedPresets') || '[]');\r\n            //TODO: Figure out how to get something like this to work\r\n            //presetsChangeCallback(parsedSelectedPresets);\r\n            return parsedSelectedPresets;\r\n        })()\r\n    );\r\n    const loading = open && presets.length === 0;\r\n\r\n    React.useEffect(() => {\r\n        localStorage.setItem('selectedPresets', JSON.stringify(selectedPresets));\r\n    }, [selectedPresets]);\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            // active = false;\r\n            return undefined;\r\n        }\r\n\r\n        (async () => {\r\n            const request = new Request(`${process.env.PUBLIC_URL}/cafl.json`, {method: 'GET', cache: 'no-cache'});\r\n            const response = await fetch(request);\r\n            const parsedPresets = await response.json();\r\n\r\n            if (active) {\r\n                setPresets(\r\n                    Object.keys(parsedPresets.programs).map(\r\n                        key => {\r\n                            let preset = parsedPresets.programs[key];\r\n                            let name = key;\r\n                            if (!preset.comments) {\r\n                                preset.comments = \"None\";\r\n                            }\r\n                            if (!preset.frequencies) {\r\n                                preset.frequencies = [];\r\n                            }\r\n                            return { name: name, ...parsedPresets.programs[key] }\r\n                        }\r\n                    )\r\n                );\r\n            }\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    // React.useEffect(() => {\r\n    //   if (!open) {\r\n    //     setOptions([]);\r\n    //   }\r\n    // }, [open]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            id=\"presets\"\r\n            /* style={{ width: 600 }} */\r\n            multiple\r\n            open={open}\r\n            onOpen={() => {\r\n                setOpen(true);\r\n            }}\r\n            onClose={() => {\r\n                setOpen(false);\r\n            }}\r\n            value={selectedPresets}\r\n            onChange={(_, values) => {\r\n                setSelectedPresets(values)\r\n                presetsChangeCallback(values);\r\n            }}\r\n            getOptionLabel={preset => preset.name}\r\n            filterSelectedOptions\r\n            filterOptions={\r\n                (allPresets, state) => {\r\n                    if (allPresets.length > 0) {\r\n                        const label = state.inputValue.toLowerCase();\r\n                        const filteredPresets = allPresets.filter(preset => {\r\n                            if (preset.name.toLowerCase().includes(label) ||\r\n                                (preset.comments && preset.comments.toLowerCase().includes(label))) {\r\n                                return true;\r\n                            }\r\n                            return false;\r\n                        });\r\n                        return filteredPresets;\r\n                    }\r\n                    return [];\r\n                }\r\n            }\r\n            //disableCloseOnSelect\r\n            disableOpenOnFocus\r\n            disableListWrap\r\n            classes={classes}\r\n            ListboxComponent={ListboxComponent}\r\n            freeSolo\r\n            autoHighlight\r\n            options={presets}\r\n            loading={loading}\r\n            renderInput={params => (\r\n                <TextField\r\n                    {...params}\r\n                    label=\"Presets\"\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <React.Fragment>\r\n                                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                {params.InputProps.endAdornment}\r\n                            </React.Fragment>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n            renderOption={(option, { inputValue }) => {\r\n                const matchOptions = {\r\n                    insideWords: true,\r\n                    findAllOccurrences: true,\r\n                };\r\n                const nameMatches = match(option.name, inputValue, matchOptions);\r\n                const nameParts = parse(option.name, nameMatches);\r\n                const commentMatches = match(option.comments, inputValue, matchOptions);\r\n                const commentParts = parse(option.comments, commentMatches);\r\n                const frequencies = (option.frequencies) ? option.frequencies.join(\", \") : undefined;\r\n                const frequencyMatches = match(frequencies, inputValue, matchOptions);\r\n                const frequencyParts = parse(frequencies, frequencyMatches);\r\n\r\n                return (\r\n                    <Grid container alignItems=\"center\">\r\n                        <Grid item xs>\r\n                            {nameParts.map((part, index) => (\r\n                                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                                    {part.text}\r\n                                </span>\r\n                            ))}\r\n                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                {option.comments && \"Comments: \"}\r\n                                {option.comments && commentParts.map((part, index) => (\r\n                                    <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                                        {part.text}\r\n                                    </span>\r\n                                ))\r\n                                }\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                {option.frequencies && \"Frequencies: \"}\r\n                                {option.frequencies && frequencyParts.map((part, index) => (\r\n                                    <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                                        {part.text}\r\n                                    </span>\r\n                                ))\r\n                                }\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport PlayIcon from '@material-ui/icons/PlayArrow';\r\n// import PauseIcon from '@material-ui/icons/Pause';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    fab: {\r\n        position: 'absolute',\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport default function ShuttleControls({ presets, options }) {\r\n    const classes = useStyles();\r\n    // const theme = useTheme();\r\n    const [playing, setPlaying] = React.useState(false);\r\n    const oscillator = React.useRef(null);\r\n    const audioCtx = React.useRef(null);\r\n    // const polySynth = React.useRef(null);\r\n    // const sequence = React.useRef(null);\r\n\r\n    const secToMs = 1000;\r\n    let playClickedTimeMs = 0;\r\n    let analyser;\r\n    let bufferLength;\r\n    let timeDomainDataArray;\r\n    let currentFrequency;\r\n    let timeouts = [];\r\n    let totalTime;\r\n\r\n    function terminateAudio() {\r\n        if (oscillator.current) {\r\n            try {\r\n                oscillator.current.onended = function () { };\r\n                // oscillator.current.frequency.cancelScheduledValues(audioCtx.current.currentTime);\r\n                // console.log(`Audio Context State: ${audioCtx.current.state}`);\r\n                // console.log('Stopping oscillator');\r\n                oscillator.current.stop(0);\r\n            } catch (err) {\r\n                // console.error('Error cleaning up oscillator');\r\n                // console.error(err);\r\n                // console.error(err.stack);\r\n            }\r\n        }\r\n\r\n        oscillator.current = undefined;\r\n        analyser = undefined;\r\n        // WARNING: Don't terminate the audioCtx, since doing so prevents repeats and requires a new button click\r\n        // audioCtx.current = undefined;\r\n    }\r\n\r\n    function initializeAudio() {\r\n        terminateAudio();\r\n\r\n        // create web audio api context\r\n        audioCtx.current = audioCtx.current || new (window.AudioContext || window.webkitAudioContext)();\r\n        // audioCtx.current.onstatechange = function () {\r\n        //     console.log(`Audio Context State: ${audioCtx.current.state}`);\r\n        // };\r\n        analyser = audioCtx.current.createAnalyser();\r\n\r\n        // create Oscillator node\r\n        oscillator.current = audioCtx.current.createOscillator();\r\n\r\n        oscillator.current.connect(analyser);\r\n        analyser.connect(audioCtx.current.destination);\r\n    }\r\n\r\n    function indicateFrequency(frequency, secondsFromNow) {\r\n        timeouts.push(\r\n            setTimeout(() => {\r\n                currentFrequency = frequency;\r\n            }, secondsFromNow * secToMs)\r\n        );\r\n    }\r\n\r\n    function playClick() {\r\n        stopClick();\r\n\r\n        initializeAudio();\r\n\r\n        analyser.fftSize = 1024;\r\n\r\n        // drawClearCanvas();\r\n\r\n        oscillator.current.type = options.waveform;\r\n        const secondsValue = 60 * 3;//parseInt($('#seconds').val());\r\n        let startOfNextFrequencyViaAudioCtx = audioCtx.current.currentTime;\r\n        let startOfNextFrequencyFromNow = 0;\r\n\r\n        let frequencies = [];\r\n        for (let presetIndex = 0; presetIndex < presets.length; presetIndex++) {\r\n            let preset = presets[presetIndex];\r\n            if (preset.frequencies) {\r\n                frequencies = frequencies.concat(preset.frequencies)\r\n            }\r\n        }\r\n\r\n        for (let frequency of frequencies) {\r\n            oscillator.current.frequency.setValueAtTime(frequency, startOfNextFrequencyViaAudioCtx);\r\n            indicateFrequency(frequency, startOfNextFrequencyFromNow);\r\n            startOfNextFrequencyViaAudioCtx += secondsValue;\r\n            startOfNextFrequencyFromNow += secondsValue;\r\n        }\r\n\r\n        bufferLength = analyser.frequencyBinCount;\r\n        timeDomainDataArray = new Uint8Array(bufferLength);\r\n\r\n        oscillator.current.onended = function () {\r\n            console.log(\"onEnded event signled\");\r\n            if (options.loop) {\r\n                setTimeout(() => {\r\n                    console.log(\"Repeating\");\r\n                    playClick();\r\n                }, 0);\r\n            } else {\r\n                stopClick();\r\n            }\r\n        };\r\n\r\n        totalTime = startOfNextFrequencyFromNow * 1000;\r\n\r\n        oscillator.current.start();\r\n        oscillator.current.stop(startOfNextFrequencyViaAudioCtx);\r\n        // drawCanvas();\r\n    }\r\n\r\n    function stopClick() {\r\n        terminateAudio();\r\n\r\n        // drawClearCanvas();\r\n\r\n        while (timeouts.length) {\r\n            clearTimeout(timeouts.pop());\r\n        }\r\n        indicateFrequency(0, 0);\r\n        // $('#elapsed-value').val('');\r\n        // $('#remaining-value').val('');\r\n        totalTime = undefined;\r\n    }\r\n\r\n    function handlePlaying() {\r\n        const isPlay = !playing && presets.length > 0;\r\n        if (isPlay) {\r\n            playClickedTimeMs = new Date().getTime();\r\n            stopClick();\r\n            if (audioCtx.current) {\r\n              audioCtx.current.close();\r\n              audioCtx.current = undefined;\r\n            }\r\n            playClick();\r\n        }\r\n        else {\r\n            stopClick();\r\n            if (audioCtx.current) {\r\n                audioCtx.current.close();\r\n                audioCtx.current = undefined;\r\n            }\r\n        }\r\n        setPlaying(isPlay);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!playing ?\r\n                <Fab aria-label=\"Play\" className={classes.fab} color=\"primary\" onClick={handlePlaying}>\r\n                    <PlayIcon />\r\n                </Fab>\r\n                :\r\n                /* <Fab aria-label=\"Pause\" className={classes.fab} color=\"secondary\" onClick={handlePlaying}>\r\n                    <PauseIcon />\r\n                </Fab> */\r\n                <Fab aria-label=\"Stop\" className={classes.fab} color=\"secondary\" onClick={handlePlaying}>\r\n                    <StopIcon />\r\n                </Fab>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Grid from '@material-ui/core/Grid';\r\n// import Paper from '@material-ui/core/Paper';\r\nimport OptionsToggle from './OptionsToggle';\r\n// import Presets from './Presets';\r\nimport PresetsVirtual from './PresetsVirtual';\r\n// import PresetsVirtual2 from './PresetsVirtual2';\r\n// import PresetsVirtualList from './PresetsVirtualList';\r\nimport ShuttleControls from \"./ShuttleControls\";\r\n// import \"./index.css\";\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport blue from '@material-ui/core/colors/blue';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: indigo,\r\n    secondary: blue,\r\n  },\r\n});\r\n\r\nclass Player extends React.Component {\r\n  // const [frequencies, setFrequencies] = React.useState(true);\r\n  // const [options, setOptions] = React.useState([]);\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      //TODO: Remove this hideousness\r\n      presets: JSON.parse(localStorage.getItem('selectedPresets') || '[]'),\r\n      options: {waveform: 'sine', loop: true}\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const presetsChangeCallback = (presets) => {\r\n      this.setState({ presets: (presets) ? presets : [] });\r\n    }\r\n\r\n    const optionsChangeCallback = (options) => {\r\n      this.setState({ options: options });\r\n    }\r\n\r\n    return (\r\n      <div className={theme.root}>\r\n        <Grid container spacing={3}>\r\n          {/* <Grid item xs={12}>\r\n            <Presets />\r\n          </Grid> */}\r\n          <Grid item xs={12}>\r\n            <PresetsVirtual presetsChangeCallback={presetsChangeCallback} />\r\n          </Grid>\r\n          {/* <Grid item xs={12} sm={6}>\r\n            <PresetsVirtual2 />\r\n          </Grid> */}\r\n          {/* <Grid item xs={12} sm={6}>\r\n            <PresetsVirtualList />\r\n          </Grid> */}\r\n          <Grid item xs={12} sm={6}>\r\n            <OptionsToggle optionsChangeCallback={optionsChangeCallback} />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <ShuttleControls presets={this.state.presets} options={this.state.options} />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n\r\n\r\n      /* <div>\r\n        <div>\r\n          <Presets />\r\n        </div>\r\n        <div>\r\n          <PresetsVirtual />\r\n        </div>\r\n        <div>\r\n          <OptionsToggle />\r\n        </div>\r\n        <div>\r\n          <ShuttleControls />\r\n        </div>\r\n      </div> */\r\n    );\r\n  }\r\n}\r\n// ========================================\r\n\r\nReactDOM.render(<ThemeProvider theme={theme}><Player /></ThemeProvider>, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}